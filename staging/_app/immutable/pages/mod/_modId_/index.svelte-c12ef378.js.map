{"version":3,"file":"index.svelte-c12ef378.js","sources":["../../../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../../../src/lib/utils/schema.ts","../../../../../../../../src/routes/mod/[modId]/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import Card, { Content } from '@smui/card';\n  import { prettyDate, prettyNumber } from '$lib/utils/formatting';\n\n  export let mod!: Pick<Mod, 'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference'>;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"text-lg break-words\">\n      <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n      <span\n        ><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n      ><br />\n      <span><strong>Created:</strong> {prettyDate(mod.created_at)}</span><br />\n      <span><strong>Views:</strong> {prettyNumber(mod.views)}</span><br />\n      <span><strong>Downloads:</strong> {prettyNumber(mod.downloads)}</span><br />\n      <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import { Icon } from '@smui/common';\n  import { prettyDate } from '$lib/utils/formatting';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    release: 'new_releases',\n    beta: 'warning',\n    alpha: 'report'\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n      {#each Object.keys(stabilities) as stability}\n        {#if latestVersions[stability]}\n          <div class=\"version\">\n            <div class=\"text-4xl w-14 h-14 p-2.5\">\n              <Icon class=\"material-icons\">{stabilities[stability]}</Icon>\n            </div>\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n                >Version {latestVersions[stability].version}</a\n              >\n              <div>{prettyDate(latestVersions[stability].created_at)}</div>\n            </div>\n            <div class=\"text-3xl w-14 h-14 p-2.5\">\n              <a\n                href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n                class=\"text-yellow-500 underline\"\n              >\n                <Icon class=\"material-icons\">download</Icon>\n              </a>\n            </div>\n          </div>\n        {/if}\n      {/each}\n    </div>\n  </Content>\n</Card>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { assets, base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n      <div class=\"grid auto-rows-min text-lg gap-y-4\">\n        {#each authors as author}\n          <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n            <div\n              class=\"rounded-full bg-cover w-14 h-14\"\n              style={`background-image: url(\"${author.user.avatar || assets + '/images/no_image.webp'}\")`}\n            />\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n              <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n            </div>\n          </div>\n        {/each}\n      </div>\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n  import { modStatus } from '$lib/utils/mod';\n  import type { Maybe, Version } from '$lib/generated';\n\n  export let modLogo!: string;\n  export let modName!: string;\n  export let latestVersions:\n    | {\n        alpha?: Maybe<Pick<Version, 'sml_version'>>;\n        beta?: Maybe<Pick<Version, 'sml_version'>>;\n        release?: Maybe<Pick<Version, 'sml_version'>>;\n      }\n    | undefined;\n\n  $: logo = modLogo || assets + '/images/no_image.webp';\n</script>\n\n<div class=\"relative overflow-hidden\">\n  {#if modStatus(latestVersions) === 'own-risk'}\n    <div class=\"mod-own-risk\">\n      <div class=\"mod-inset\" />\n      <div class=\"mod-stripe\">USE AT YOUR OWN RISK</div>\n    </div>\n  {:else if modStatus(latestVersions) === 'outdated'}\n    <div class=\"mod-outdated\">\n      <div class=\"mod-inset\" />\n      <div class=\"mod-stripe\">OUTDATED</div>\n    </div>\n  {/if}\n  <img class=\"rounded-lg sm:max-w-lg max-w-full w-full\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n  import Card, { Content } from '@smui/card';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<Card class=\"h-fit\">\n  <Content>\n    <div class=\"markdown-content break-words\">\n      {#await description then descriptionRendered}\n        <p>{@html descriptionRendered}</p>\n      {/await}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { operationStore, query } from '@urql/svelte';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import DataTable, { Head, Body, Row, Cell } from '@smui/data-table';\n  import Button, { Label, Icon } from '@smui/button';\n  import { installMod } from '$lib/stores/launcher';\n  import { prettyDate, prettyNumber, prettyBytes } from '$lib/utils/formatting';\n\n  export let modId!: string;\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  const versions = operationStore(GetModVersionsDocument, {\n    mod: modId,\n    limit: 100,\n    offset: 0\n  });\n\n  query(versions);\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n<Card class=\"h-fit\">\n  {#if $versions.fetching}\n    <Content>Loading...</Content>\n  {:else if $versions.error}\n    <Content>Oh no... {$versions.error.message}</Content>\n  {:else}\n    <DataTable class=\"max-w-full\">\n      <Head>\n        <Row>\n          <Cell>Version</Cell>\n          <Cell>Stability</Cell>\n          <Cell>SML Version</Cell>\n          <Cell>Downloads</Cell>\n          <Cell>Upload Date</Cell>\n          <Cell><!-- Buttons --></Cell>\n        </Row>\n      </Head>\n      <Body>\n        {#each $versions.data.getMod.versions as version}\n          <Row on:click={() => toggleRow(version.id)}>\n            <Cell>{version.version}</Cell>\n            <Cell>{version.stability}</Cell>\n            <Cell>{version.sml_version}</Cell>\n            <Cell>{prettyNumber(version.downloads)}</Cell>\n            <Cell>{prettyDate(version.created_at)}</Cell>\n            <Cell>\n              <div class=\"grid grid-flow-col gap-4\">\n                <Button variant=\"outlined\" href={base + '/mod/' + modId + '/version/' + version.id}>View</Button>\n                <Button variant=\"outlined\" href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n                  >Download</Button\n                >\n                <Button variant=\"outlined\" on:click={() => installMod($versions.data.getMod.mod_reference)}>\n                  <Label>Install</Label>\n                  <Icon class=\"material-icons\">download</Icon>\n                </Button>\n              </div>\n            </Cell>\n          </Row>\n\n          {#if expandedVersions.has(version.id)}\n            <Row>\n              <Cell colspan={6}>\n                <div class=\"col-span-3 p-2\">Size: {prettyBytes(version.size)}</div>\n                <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n                <div class=\"col-span-6 p-2 markdown-content\">\n                  {#await markdown(version.changelog) then changelogRendered}\n                    {@html changelogRendered}\n                  {/await}\n                </div>\n              </Cell>\n            </Row>\n          {/if}\n        {/each}\n      </Body>\n    </DataTable>\n  {/if}\n</Card>\n","import type { Thing, WithContext } from 'schema-dts';\nimport type { Mod } from '$lib/generated';\nimport { assets } from '$app/paths';\n\nexport type Schema = Thing | WithContext<Thing>;\n\nexport function serializeSchema(schema: Schema) {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema)}</script>`;\n}\n\nexport const modSchema = (mod: Pick<Mod, 'name' | 'logo' | 'short_description'>): Schema => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'CreativeWork',\n    image: mod.logo || assets + '/images/no_image.webp',\n    name: mod.name,\n    description: mod.short_description\n  };\n};\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n  import { operationStore } from '@urql/svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { loadWaitForNoFetch } from '$lib/utils/gql';\n\n  const modQ = operationStore(GetModDocument, { mod: undefined });\n\n  export const load = paramsToProps(async (input) => {\n    modQ.variables.mod = input.params.modId;\n    return loadWaitForNoFetch({\n      mod: modQ\n    })(input);\n  });\n</script>\n\n<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import { mutation } from '@urql/svelte';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { get, writable } from 'svelte/store';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Button from '@smui/button';\n  import Dialog, { Title, Content as DialogContent } from '@smui/dialog';\n  import { modSchema, serializeSchema } from '$lib/utils/schema';\n\n  export let modId!: string;\n  export let mod: typeof modQ;\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const deleteMod = mutation({\n    query: DeleteModDocument\n  });\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.mod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n\n  const deleteDialogOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    deleteMod({ modId: get(mod).data.mod.id }).then((value) => {\n      if (value.error) {\n        console.error(value.error.message);\n        errorMessage = 'Error deleting mod: ' + value.error.message;\n        errorToast = true;\n      } else {\n        // TODO Toast or something\n        goto(base + '/mods');\n      }\n    });\n  };\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description={$mod.data.mod.short_description}\n      title={$mod.data.mod.name}\n      image={$mod.data.mod.logo}\n    />\n\n    {@html serializeSchema(modSchema($mod.data.mod))}\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.mod}\n  <div class=\"grid gap-6 xlx:grid-flow-row\">\n    <div class=\"flex flex-wrap h-auto justify-between items-center\">\n      <h1 class=\"text-4xl font-bold\">{$mod.data.mod.name}</h1>\n\n      <div>\n        {#if canUserEdit}\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/edit')}>Edit</Button>\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(true)}>Delete</Button>\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/new-version')}>New Version</Button>\n        {/if}\n\n        <Button variant=\"outlined\" on:click={() => (versionsTab = !versionsTab)}>\n          {#if !versionsTab}\n            Versions\n          {:else}\n            Description\n          {/if}\n        </Button>\n      </div>\n    </div>\n    <div class=\"grid grid-auto-max auto-cols-fr gap-4\">\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.mod} />\n      {:else}\n        <ModVersions modId={$mod.data.mod.id} />\n      {/if}\n      <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n        <ModLogo\n          modLogo={$mod.data.mod.logo}\n          modName={$mod.data.mod.name}\n          latestVersions={$mod.data.mod.latestVersions}\n        />\n        <ModInfo mod={$mod.data.mod} />\n        <ModLatestVersions modId={$mod.data.mod.id} latestVersions={$mod.data.mod.latestVersions} />\n        <ModAuthors authors={$mod.data.mod.authors} />\n      </div>\n    </div>\n  </div>\n\n  {#if canUserEdit}\n    <Dialog bind:open={$deleteDialogOpen}>\n      <Title>Delete Mod?</Title>\n      <DialogContent>\n        <div class=\"grid grid-flow-row gap-4\">\n          <span>Are you sure you wish to delete this mod</span>\n\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(false)}>Cancel</Button>\n          <Button variant=\"outlined\" on:click={() => deleteModFn()}>Delete</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  {/if}\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n"],"names":["t4_value","ctx","source_url","prettyDate","created_at","prettyNumber","views","downloads","t20_value","mod_reference","attr_dev","a","a_href_value","insert_hydration_dev","target","div","anchor","append_hydration_dev","h3","span0","strong0","br0","span1","strong1","br1","span2","strong2","br2","span3","strong3","br3","span4","strong4","br4","dirty","set_data_dev","t4","t8","t8_value","t12","t12_value","t16","t16_value","t20","mod","$$props","version","a0","a0_href_value","base","id","a1","a1_href_value","API_REST","div4","div0","div2","div1","div3","t2","t2_value","current","t_value","if_block","create_if_block","Object","keys","length","i","each_blocks","stabilities","release","beta","alpha","latestVersions","modId","user","username","t3_value","role","charAt","toUpperCase","slice","toLowerCase","div0_style_value","avatar","assets","t1","t1_value","t3","authors","modStatus","img","img_src_value","modLogo","modName","logo","p","innerHTML","raw_value","info","handle_promise","promise","$$invalidate","description","full_description","markdown","short_description","t","stability","sml_version","html_tag","prettyBytes","size","hash","changelog","show_if","has","each_value","data","getMod","versions","error","message","fetching","expandedVersions","Set","operationStore","GetModVersionsDocument","limit","offset","query","toggleRow","versionId","delete","add","click_handler","installMod","$versions","schema","JSON","stringify","modSchema","image","name","serializeSchema","title","metadescriptors_changes","t0_value","create_if_block_6","create_if_block_3","h1","t0","modlogo_changes","modlatestversions_changes","modauthors_changes","create_if_block_5","props","modversions_changes","span","create_if_block_7","modQ","GetModDocument","undefined","load","paramsToProps","async","variables","input","params","loadWaitForNoFetch","versionsTab","errorMessage","errorToast","deleteMod","mutation","DeleteModDocument","deleteDialogOpen","writable","deleteModFn","get","then","value","console","goto","set","click_handler_2","click_handler_3","$deleteDialogOpen","canUserEdit","$user","roles","deleteContent","$mod","findIndex","author","user_id"],"mappings":"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"}