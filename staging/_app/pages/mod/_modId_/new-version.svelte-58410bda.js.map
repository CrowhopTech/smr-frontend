{"version":3,"file":"new-version.svelte-58410bda.js","sources":["../../../../../../../src/lib/utils/chunked-upload.ts","../../../../../../../src/routes/mod/[modId]/new-version.svelte"],"sourcesContent":["/* eslint-disable */\n\nimport type { File } from '$lib/models/file';\nimport type { ExecuteMutation, OperationStore } from '@urql/svelte';\nimport type {\n  CheckVersionUploadStateQuery,\n  CreateVersionMutation,\n  Exact,\n  FinalizeCreateVersionMutation,\n  NewVersion,\n  UploadVersionPartMutation\n} from '$lib/generated';\nimport type { Writable } from 'svelte/store';\n\nexport type UploadState = {\n  total: number;\n  uploaded: number;\n};\n\nexport type ChunkedResponse = CheckVersionUploadStateQuery['checkVersionUploadState'];\n\nexport const chunkedUpload = async (\n  file: File,\n  modId: string,\n  version: NewVersion,\n  state: Writable<UploadState>,\n  gql: {\n    createVersion: ExecuteMutation<CreateVersionMutation, Exact<{ modId: any }>>;\n    uploadVersionPart: ExecuteMutation<\n      UploadVersionPartMutation,\n      Exact<{ modId: any; versionId: any; part: number; file: any }>\n    >;\n    finalizeCreateVersion: ExecuteMutation<\n      FinalizeCreateVersionMutation,\n      Exact<{ modId: any; versionId: any; version: NewVersion }>\n    >;\n    checkVersionUploadState: OperationStore<\n      CheckVersionUploadStateQuery,\n      Exact<{ modId: any; versionId: any }>,\n      CheckVersionUploadStateQuery\n    >;\n  }\n): Promise<ChunkedResponse> => {\n  const chunkSize = 10000000; // ~ 10MB\n\n  const chunksQuantity = Math.ceil(file.size / chunkSize);\n  const chunksQueue = new Array(chunksQuantity)\n    .fill(0)\n    .map((_, index) => index)\n    .reverse();\n\n  const upload = (chunk: Blob, chunkId: number, versionID: string) => {\n    return gql.uploadVersionPart({\n      modId: modId,\n      versionId: versionID,\n      part: chunkId,\n      file: chunk\n    });\n  };\n\n  const threadsQuantity = 10;\n  let activeConnections = 0;\n  let retries = 0;\n  const sendNext = (versionID: string) => {\n    if (activeConnections >= threadsQuantity) {\n      return;\n    }\n\n    if (!chunksQueue.length) {\n      return;\n    }\n\n    const chunkId = chunksQueue.pop();\n    const begin = chunkId * chunkSize;\n    const chunk = file.slice(begin, begin + chunkSize);\n\n    activeConnections += 1;\n\n    return Promise.all([\n      upload(chunk, chunkId + 1, versionID)\n        .then(() => {\n          activeConnections -= 1;\n\n          state.set({\n            total: chunksQuantity,\n            uploaded: chunksQuantity - chunksQueue.length - activeConnections\n          });\n\n          return sendNext(versionID);\n        })\n        .catch((err) => {\n          console.error('Upload failed:', err);\n          activeConnections -= 1;\n          chunksQueue.push(chunkId);\n          retries += 1;\n          if (retries < 5) {\n            return sendNext(versionID);\n          } else {\n            throw new Error('Failed uploading after 5 attempts');\n          }\n        }),\n      sendNext(versionID)\n    ]);\n  };\n\n  return gql\n    .createVersion({ modId })\n    .then(async (data) => {\n      state.set({\n        total: chunksQuantity,\n        uploaded: 0\n      });\n\n      await sendNext(data.data.createVersion);\n\n      return data.data.createVersion;\n    })\n    .then((versionID) => {\n      console.log('Finalizing', { versionID });\n\n      return gql\n        .finalizeCreateVersion({\n          modId: modId,\n          versionId: versionID,\n          version: version\n        })\n        .then(() => {\n          return new Promise<ChunkedResponse>((resolve, reject) => {\n            let tries = 0;\n            const interval = setInterval(() => {\n              if (tries == 60) {\n                clearInterval(interval);\n                return reject(new Error('Timed out waiting for mod processing'));\n              }\n\n              gql.checkVersionUploadState.reexecute({\n                requestPolicy: 'network-only'\n              });\n              tries++;\n            }, 10000);\n\n            gql.checkVersionUploadState.variables.versionId = versionID;\n            const sub = gql.checkVersionUploadState.subscribe((data) => {\n              if (data.fetching) {\n                return;\n              }\n\n              if (data.error) {\n                clearInterval(interval);\n                reject(new Error(data.error.message));\n                setTimeout(sub);\n                return;\n              }\n\n              if (!data.data) {\n                return;\n              }\n\n              if (!data.data.checkVersionUploadState) {\n                return;\n              }\n\n              if (!data.data.checkVersionUploadState.version) {\n                return;\n              }\n\n              if (!data.data.checkVersionUploadState.version.id) {\n                return;\n              }\n\n              sub();\n              clearInterval(interval);\n              resolve(data.data.checkVersionUploadState);\n            });\n          });\n        });\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n\n  export const load = paramsToProps();\n</script>\n\n<script lang=\"ts\">\n  import { mutation, operationStore, query } from '@urql/svelte';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { goto } from '$app/navigation';\n  import type { VersionData } from '$lib/models/versions';\n  import VersionForm from '$lib/components/versions/VersionForm.svelte';\n  import {\n    CheckVersionUploadStateDocument,\n    CreateVersionDocument,\n    FinalizeCreateVersionDocument,\n    GetModReferenceDocument,\n    UploadVersionPartDocument\n  } from '$lib/generated';\n  import { get, writable } from 'svelte/store';\n  import { chunkedUpload } from '$lib/utils/chunked-upload';\n  import type { UploadState } from '$lib/utils/chunked-upload';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Card, { Content } from '@smui/card';\n\n  export let modId!: string;\n\n  const uploadStatus = writable<undefined | string>('');\n  const uploadPercent = writable<number>(0);\n\n  const uploadState = writable<UploadState>();\n\n  uploadState.subscribe((up) => {\n    if (up) {\n      if (up.uploaded === up.total) {\n        uploadStatus.set(`Processing...`);\n        uploadPercent.set(100);\n      } else {\n        uploadStatus.set(`Uploading: ${up.uploaded}/${up.total}`);\n        uploadPercent.set((up.uploaded / up.total) * 100);\n      }\n    }\n  });\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const mod = operationStore(GetModReferenceDocument, { mod: modId });\n\n  query(mod);\n\n  const createVersion = mutation({\n    query: CreateVersionDocument\n  });\n\n  const uploadVersionPart = mutation({\n    query: UploadVersionPartDocument\n  });\n\n  const finalizeCreateVersion = mutation({\n    query: FinalizeCreateVersionDocument\n  });\n\n  const checkVersionUploadState = operationStore(\n    CheckVersionUploadStateDocument,\n    {\n      versionId: undefined,\n      modId: undefined\n    },\n    {\n      pause: true\n    }\n  );\n\n  $: $mod.data && (checkVersionUploadState.variables.modId = $mod.data.mod.id);\n\n  query(checkVersionUploadState);\n\n  const onSubmit = async (data: VersionData) => {\n    return chunkedUpload(\n      data.file,\n      get(mod).data.mod.id,\n      {\n        changelog: data.changelog,\n        stability: data.stability\n      },\n      uploadState,\n      {\n        createVersion,\n        uploadVersionPart,\n        finalizeCreateVersion,\n        checkVersionUploadState\n      }\n    )\n      .then((success) => {\n        console.log({ success });\n        // TODO Toast or something\n        goto(base + '/mod/' + modId + '/version/' + success.version.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        errorMessage = 'Error creating version: ' + err.message;\n        errorToast = true;\n        uploadStatus.set('');\n      });\n  };\n\n  $: if (!errorToast) errorMessage = '';\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description=\"Creating a new version of mod {$mod.data.mod.name}\"\n      title=\"New version of mod {$mod.data.mod.name}\"\n    />\n  {/if}\n</svelte:head>\n\n<h1 class=\"text-4xl my-4 font-bold\">\n  New Version for\n  {#if $mod.fetching}\n    ...\n  {:else if !$mod.error}\n    {$mod.data.mod.name}\n  {/if}\n</h1>\n\n<Card>\n  <Content>\n    {#if $mod.fetching}\n      <p>Loading...</p>\n    {:else if $mod.error}\n      <p>Oh no... {$mod.error.message}</p>\n    {:else}\n      <VersionForm {onSubmit} modReference={$mod.data.mod.mod_reference} />\n\n      {#if $uploadStatus}\n        <div class=\"relative pt-4\">\n          <div class=\"flex mb-2 items-center justify-between\">\n            <div>\n              <span\n                class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-white bg-yellow-600\"\n              >\n                {$uploadStatus}\n              </span>\n            </div>\n            <div class=\"text-right\">\n              <span class=\"text-xs font-semibold inline-block text-white\">{$uploadPercent.toFixed(0)}%</span>\n            </div>\n          </div>\n          <div class=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-600\">\n            <div\n              style=\"width: {$uploadPercent.toFixed(0)}%\"\n              class=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-yellow-600\"\n            />\n          </div>\n        </div>\n      {/if}\n    {/if}\n  </Content>\n</Card>\n\n<Toast bind:running={errorToast}>\n  <span>{errorMessage}</span>\n</Toast>\n"],"names":["get"],"mappings":"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"}