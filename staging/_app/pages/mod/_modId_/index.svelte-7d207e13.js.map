{"version":3,"file":"index.svelte-7d207e13.js","sources":["../../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../../src/lib/utils/schema.ts","../../../../../../../src/routes/mod/[modId]/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import Card, { Content } from '@smui/card';\n  import { prettyDate, prettyNumber } from '$lib/utils/formatting';\n\n  export let mod!: Pick<Mod, 'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference'>;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"text-lg break-words\">\n      <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n      <span\n        ><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n      ><br />\n      <span><strong>Created:</strong> {prettyDate(mod.created_at)}</span><br />\n      <span><strong>Views:</strong> {prettyNumber(mod.views)}</span><br />\n      <span><strong>Downloads:</strong> {prettyNumber(mod.downloads)}</span><br />\n      <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import { Icon } from '@smui/common';\n  import { prettyDate } from '$lib/utils/formatting';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    release: 'new_releases',\n    beta: 'warning',\n    alpha: 'report'\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n      {#each Object.keys(stabilities) as stability}\n        {#if latestVersions[stability]}\n          <div class=\"version\">\n            <div class=\"text-4xl w-14 h-14 p-2.5\">\n              <Icon class=\"material-icons\">{stabilities[stability]}</Icon>\n            </div>\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n                >Version {latestVersions[stability].version}</a\n              >\n              <div>{prettyDate(latestVersions[stability].created_at)}</div>\n            </div>\n            <div class=\"text-3xl w-14 h-14 p-2.5\">\n              <a\n                href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n                class=\"text-yellow-500 underline\"\n              >\n                <Icon class=\"material-icons\">download</Icon>\n              </a>\n            </div>\n          </div>\n        {/if}\n      {/each}\n    </div>\n  </Content>\n</Card>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { assets, base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n      <div class=\"grid auto-rows-min text-lg gap-y-4\">\n        {#each authors as author}\n          <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n            <div\n              class=\"rounded-full bg-cover w-14 h-14\"\n              style={`background-image: url(\"${author.user.avatar || assets + '/images/no_image.webp'}\")`}\n            />\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n              <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n            </div>\n          </div>\n        {/each}\n      </div>\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n  import { modStatus } from '$lib/utils/mod';\n  import type { Maybe, Version } from '$lib/generated';\n\n  export let modLogo!: string;\n  export let modName!: string;\n  export let latestVersions:\n    | {\n        alpha?: Maybe<Pick<Version, 'sml_version'>>;\n        beta?: Maybe<Pick<Version, 'sml_version'>>;\n        release?: Maybe<Pick<Version, 'sml_version'>>;\n      }\n    | undefined;\n\n  $: logo = modLogo || assets + '/images/no_image.webp';\n</script>\n\n<div class=\"relative overflow-hidden\">\n  {#if modStatus(latestVersions) === 'own-risk'}\n    <div class=\"mod-own-risk\">\n      <div class=\"mod-inset\" />\n      <div class=\"mod-stripe\">USE AT YOUR OWN RISK</div>\n    </div>\n  {:else if modStatus(latestVersions) === 'outdated'}\n    <div class=\"mod-outdated\">\n      <div class=\"mod-inset\" />\n      <div class=\"mod-stripe\">OUTDATED</div>\n    </div>\n  {/if}\n  <img class=\"rounded-lg sm:max-w-lg max-w-full w-full\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n  import Card, { Content } from '@smui/card';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<Card class=\"h-fit\">\n  <Content>\n    <div class=\"markdown-content break-words\">\n      {#await description then descriptionRendered}\n        <p>{@html descriptionRendered}</p>\n      {/await}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { operationStore, query } from '@urql/svelte';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import DataTable, { Head, Body, Row, Cell } from '@smui/data-table';\n  import Button, { Label, Icon } from '@smui/button';\n  import { installMod } from '$lib/stores/launcher';\n  import { prettyDate, prettyNumber, prettyBytes } from '$lib/utils/formatting';\n\n  export let modId!: string;\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  const versions = operationStore(GetModVersionsDocument, {\n    mod: modId,\n    limit: 100,\n    offset: 0\n  });\n\n  query(versions);\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n<Card class=\"h-fit\">\n  {#if $versions.fetching}\n    <Content>Loading...</Content>\n  {:else if $versions.error}\n    <Content>Oh no... {$versions.error.message}</Content>\n  {:else}\n    <DataTable class=\"max-w-full\">\n      <Head>\n        <Row>\n          <Cell>Version</Cell>\n          <Cell>Stability</Cell>\n          <Cell>SML Version</Cell>\n          <Cell>Downloads</Cell>\n          <Cell>Upload Date</Cell>\n          <Cell><!-- Buttons --></Cell>\n        </Row>\n      </Head>\n      <Body>\n        {#each $versions.data.getMod.versions as version}\n          <Row on:click={() => toggleRow(version.id)}>\n            <Cell>{version.version}</Cell>\n            <Cell>{version.stability}</Cell>\n            <Cell>{version.sml_version}</Cell>\n            <Cell>{prettyNumber(version.downloads)}</Cell>\n            <Cell>{prettyDate(version.created_at)}</Cell>\n            <Cell>\n              <div class=\"grid grid-flow-col gap-4\">\n                <Button variant=\"outlined\" href={base + '/mod/' + modId + '/version/' + version.id}>View</Button>\n                <Button variant=\"outlined\" href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n                  >Download</Button\n                >\n                <Button variant=\"outlined\" on:click={() => installMod($versions.data.getMod.mod_reference)}>\n                  <Label>Install</Label>\n                  <Icon class=\"material-icons\">download</Icon>\n                </Button>\n              </div>\n            </Cell>\n          </Row>\n\n          {#if expandedVersions.has(version.id)}\n            <Row>\n              <Cell colspan={6}>\n                <div class=\"col-span-3 p-2\">Size: {prettyBytes(version.size)}</div>\n                <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n                <div class=\"col-span-6 p-2 markdown-content\">\n                  {#await markdown(version.changelog) then changelogRendered}\n                    {@html changelogRendered}\n                  {/await}\n                </div>\n              </Cell>\n            </Row>\n          {/if}\n        {/each}\n      </Body>\n    </DataTable>\n  {/if}\n</Card>\n","import type { Thing, WithContext } from 'schema-dts';\nimport type { Mod } from '$lib/generated';\nimport { assets } from '$app/paths';\n\nexport type Schema = Thing | WithContext<Thing>;\n\nexport function serializeSchema(schema: Schema) {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema)}</script>`;\n}\n\nexport const modSchema = (mod: Pick<Mod, 'name' | 'logo' | 'short_description'>): Schema => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'CreativeWork',\n    image: mod.logo || assets + '/images/no_image.webp',\n    name: mod.name,\n    description: mod.short_description\n  };\n};\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n  import { operationStore } from '@urql/svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { loadWaitForNoFetch } from '$lib/utils/gql';\n\n  const modQ = operationStore(GetModDocument, { mod: undefined });\n\n  export const load = paramsToProps(async (input) => {\n    modQ.variables.mod = input.params.modId;\n    return loadWaitForNoFetch({\n      mod: modQ\n    })(input);\n  });\n</script>\n\n<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import { mutation } from '@urql/svelte';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { get, writable } from 'svelte/store';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Button from '@smui/button';\n  import Dialog, { Title, Content as DialogContent } from '@smui/dialog';\n  import { modSchema, serializeSchema } from '$lib/utils/schema';\n\n  export let modId!: string;\n  export let mod: typeof modQ;\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const deleteMod = mutation({\n    query: DeleteModDocument\n  });\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.mod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n\n  const deleteDialogOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    deleteMod({ modId: get(mod).data.mod.id }).then((value) => {\n      if (value.error) {\n        console.error(value.error.message);\n        errorMessage = 'Error deleting mod: ' + value.error.message;\n        errorToast = true;\n      } else {\n        // TODO Toast or something\n        goto(base + '/mods');\n      }\n    });\n  };\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description={$mod.data.mod.short_description}\n      title={$mod.data.mod.name}\n      image={$mod.data.mod.logo}\n    />\n\n    {@html serializeSchema(modSchema($mod.data.mod))}\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.mod}\n  <div class=\"grid gap-6 xlx:grid-flow-row\">\n    <div class=\"flex flex-wrap h-auto justify-between items-center\">\n      <h1 class=\"text-4xl font-bold\">{$mod.data.mod.name}</h1>\n\n      <div>\n        {#if canUserEdit}\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/edit')}>Edit</Button>\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(true)}>Delete</Button>\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/new-version')}>New Version</Button>\n        {/if}\n\n        <Button variant=\"outlined\" on:click={() => (versionsTab = !versionsTab)}>\n          {#if !versionsTab}\n            Versions\n          {:else}\n            Description\n          {/if}\n        </Button>\n      </div>\n    </div>\n    <div class=\"grid grid-auto-max auto-cols-fr gap-4\">\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.mod} />\n      {:else}\n        <ModVersions modId={$mod.data.mod.id} />\n      {/if}\n      <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n        <ModLogo\n          modLogo={$mod.data.mod.logo}\n          modName={$mod.data.mod.name}\n          latestVersions={$mod.data.mod.latestVersions}\n        />\n        <ModInfo mod={$mod.data.mod} />\n        <ModLatestVersions modId={$mod.data.mod.id} latestVersions={$mod.data.mod.latestVersions} />\n        <ModAuthors authors={$mod.data.mod.authors} />\n      </div>\n    </div>\n  </div>\n\n  {#if canUserEdit}\n    <Dialog bind:open={$deleteDialogOpen}>\n      <Title>Delete Mod?</Title>\n      <DialogContent>\n        <div class=\"grid grid-flow-row gap-4\">\n          <span>Are you sure you wish to delete this mod</span>\n\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(false)}>Cancel</Button>\n          <Button variant=\"outlined\" on:click={() => deleteModFn()}>Delete</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  {/if}\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n"],"names":["get"],"mappings":"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"}