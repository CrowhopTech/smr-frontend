{"version":3,"file":"forms-82642707.js","sources":["../../../../../src/lib/utils/forms.ts"],"sourcesContent":["import type { ZodArray, ZodObject, ZodRawShape, ZodTypeAny } from 'zod';\nimport { ZodOptional } from 'zod';\n\nexport const trimNonSchema = <T, K extends T>(data: K, schema: ZodObject<ZodRawShape>): T => {\n  return Object.fromEntries(\n    Object.entries(data)\n      .map((o) => {\n        if (Object.keys(schema.shape).indexOf(o[0]) >= 0) {\n          let value = o[1];\n          if (typeof value === 'object') {\n            let objSchema = schema.shape[o[0]];\n            if (objSchema instanceof ZodOptional) {\n              objSchema = (objSchema as ZodOptional<ZodTypeAny>).unwrap();\n            }\n\n            if (Array.isArray(value)) {\n              const arrayType = (objSchema as ZodArray<ZodTypeAny>).element;\n              for (let i = 0; i < value.length; i++) {\n                value[i] = trimNonSchema(value[i], arrayType as ZodObject<ZodRawShape>);\n              }\n            } else if (value.constructor.name !== 'File') {\n              value = trimNonSchema(value, objSchema as ZodObject<ZodRawShape>);\n            }\n          }\n\n          return [o[0], value];\n        }\n\n        return undefined;\n      })\n      .filter((val) => !!val)\n  ) as T;\n};\n"],"names":[],"mappings":"6CAGa,GAAgB,CAAiB,EAAS,IAC9C,OAAO,YACZ,OAAO,QAAQ,GACZ,IAAI,AAAC,GAAM,IACN,OAAO,KAAK,EAAO,OAAO,QAAQ,EAAE,KAAO,EAAG,IAC5C,GAAQ,EAAE,MACV,MAAO,IAAU,SAAU,IACzB,GAAY,EAAO,MAAM,EAAE,OAC3B,YAAqB,OACV,EAAsC,UAGjD,MAAM,QAAQ,GAAQ,MAClB,GAAa,EAAmC,eAC7C,GAAI,EAAG,EAAI,EAAM,OAAQ,MAC1B,GAAK,EAAc,EAAM,GAAI,OAE5B,GAAM,YAAY,OAAS,WAC5B,EAAc,EAAO,UAI1B,CAAC,EAAE,GAAI,MAKjB,OAAO,AAAC,GAAQ,CAAC,CAAC"}