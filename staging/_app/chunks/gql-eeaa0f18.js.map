{"version":3,"file":"gql-eeaa0f18.js","sources":["../../../../../src/lib/utils/gql.ts"],"sourcesContent":["import type { OperationStore } from '@urql/svelte';\nimport { get, readable } from 'svelte/store';\nimport type { Load } from '@sveltejs/kit';\nimport { browser } from '$app/env';\nimport { gqlClient } from '$lib/stores/global';\n\n// Pretend you didn't see this file\n\nexport const loadWaitForNoFetch = (queries: { [key: string]: OperationStore }): Load => {\n  return async function () {\n    // If on the browser, initialize queries and start fetching, but instantly return out\n    if (browser) {\n      const result = Object.keys(queries).map((key) => {\n        const query = queries[key];\n\n        // Retrieve the global GQL client\n        get(gqlClient)\n          .query(query.query, query.variables, query.context)\n          .toPromise()\n          .then((data) => {\n            // Update query fields without calling set\n            query.update((value) => {\n              (value as unknown)['fetching'] = false;\n              if (data) {\n                (value as unknown)['data'] = data.data;\n                (value as unknown)['error'] = data.error;\n              }\n              return value;\n            });\n\n            // Force query to update its underlying store\n            query.set({\n              context: {\n                ...query.context,\n                updated: new Date()\n              }\n            });\n          })\n          .catch((err) => {\n            // Update query fields without calling set\n            query.update((value) => {\n              (value as unknown)['fetching'] = false;\n              (value as unknown)['data'] = undefined;\n              (value as unknown)['error'] = err;\n              return value;\n            });\n\n            // Force query to update its underlying store\n            query.set({\n              context: {\n                ...query.context,\n                updated: new Date()\n              }\n            });\n          });\n\n        // Update query fields without calling set\n        query.update((value) => {\n          (value as unknown)['fetching'] = true;\n          return value;\n        });\n\n        // Force query to update its underlying store\n        query.set({\n          context: {\n            ...query.context,\n            updated: new Date()\n          }\n        });\n\n        return [key, query];\n      });\n\n      return {\n        props: Object.fromEntries(result)\n      };\n    }\n\n    // If on SSR, block the load until all queries have returned\n    return {\n      props: Object.fromEntries(\n        await Promise.all(\n          Object.keys(queries).map((key) => {\n            const query = queries[key];\n            return get(gqlClient)\n              .query(query.query, query.variables, query.context)\n              .toPromise()\n              .then((data) => [key, readable(data)]);\n          })\n        )\n      )\n    };\n  };\n};\n"],"names":[],"mappings":"wFAQa,GAAqB,AAAC,GAC1B,gBAAkB,CAEV,MACL,GAAS,OAAO,KAAK,GAAS,IAAI,AAAC,GAAQ,MACzC,GAAQ,EAAQ,YAGlB,GACD,MAAM,EAAM,MAAO,EAAM,UAAW,EAAM,SAC1C,YACA,KAAK,AAAC,GAAS,GAER,OAAO,AAAC,GACX,GAAkB,SAAc,GAC7B,GACD,GAAkB,KAAU,EAAK,KACjC,EAAkB,MAAW,EAAK,OAE9B,MAIH,IAAI,CACR,QAAS,IACJ,EAAM,QACT,QAAS,GAAI,WAIlB,MAAM,AAAC,GAAQ,GAER,OAAO,AAAC,GACX,GAAkB,SAAc,GAChC,EAAkB,KAAU,OAC5B,EAAkB,MAAW,EACvB,MAIH,IAAI,CACR,QAAS,IACJ,EAAM,QACT,QAAS,GAAI,aAMf,OAAO,AAAC,GACX,GAAkB,SAAc,GAC1B,MAIH,IAAI,CACR,QAAS,IACJ,EAAM,QACT,QAAS,GAAI,SAIV,CAAC,EAAK,WAGR,CACL,MAAO,OAAO,YAAY"}