{"version":3,"file":"VersionForm-be88938a.js","sources":["../../../../../src/lib/models/versions.ts","../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> => {\n  return zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n};\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then((zip) => {\n        const uPluginJsonFile = zip.file(modReference + '.uplugin');\n        if (uPluginJsonFile) {\n          return validateUPluginJsonModZip(zip, uPluginJsonFile, modReference);\n        }\n\n        return {\n          message: modReference + '.uplugin missing from mod'\n        };\n      })\n      .catch((err) => {\n        return {\n          message: 'invalid zip/smod file: ' + err\n        };\n      })\n  );\n};\n\nconst validateUPluginJsonModZip = async (\n  zip: JSZip,\n  uPluginJsonFile: JSZip.JSZipObject,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  return uPluginJsonFile\n    .async('string')\n    .then(async (uPluginJson) => {\n      const result = await validateUPluginJson(uPluginJson);\n\n      if (result.length != 0) {\n        return {\n          message: `invalid ${modReference}.uplugin`,\n          extended: result\n        };\n      }\n\n      const parsed = JSON.parse(uPluginJson);\n\n      let foundSML = false;\n      for (const dependency of parsed.Plugins) {\n        if (dependency.Name === 'SML') {\n          foundSML = true;\n          break;\n        }\n      }\n\n      if (!foundSML) {\n        return {\n          message: 'mod must depend on SML'\n        };\n      }\n\n      return {\n        uplugin: parsed,\n        objects: Object.keys(zip.files).filter((f) => f.endsWith('.dll') || f.endsWith('.pak'))\n      };\n    })\n    .catch((err) => {\n      return {\n        message: `invalid ${modReference}.uplugin: ${err}`\n      };\n    });\n};\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { svelteReporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import Textfield from '@smui/textfield';\n  import Button from '@smui/button';\n  import { VersionStabilities } from '$lib/generated';\n  import Select, { Option } from '@smui/select';\n  import { prettyBytes } from '$lib/utils/formatting';\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Alpha\n  };\n  export let submitText = 'Create';\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator, svelteReporter],\n    validateSchema: versionSchema,\n    onSubmit: (data: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(data, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Select bind:value={$data.stability} label=\"Stability\">\n        <Option value=\"alpha\">Alpha</Option>\n        <Option value=\"beta\">Beta</Option>\n        <Option value=\"release\">Release</Option>\n      </Select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">File:</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>File Type:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>File Size:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>Version:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                Mod is missing SemVersion field! Are you sure you want to continue? Your version will be set to {$modMeta\n                  .uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>Dependencies:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>Objects:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                Mod contains no objects (.dll, .pak)! Are you sure you want to continue?\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.changelog}\n          label=\"Changelog\"\n          required\n          input$rows={10}\n        />\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>Preview:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\" {disabled}>{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["zod.object","zod.optional","zod.any","zod.ZodIssueCode","zod.string","createForm","validator"],"mappings":"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"}